from .blob import MWDBBlob
from .config import MWDBConfig
from .file import MWDBFile
from .object import MWDBObject
from typing import Any, Optional, Iterator, Union, Dict


class MWDB:
    api: Any = ...
    def __init__(self, api: Optional[Any] = ..., **api_options: Any) -> None: ...
    def login(self, username: Optional[Any] = ..., password: Optional[Any] = ..., warn: bool = ...) -> None: ...
    def logout(self) -> None: ...
    def recent_objects(self) -> Iterator[MWDBObject]: ...
    def recent_files(self) -> Iterator[MWDBFile]: ...
    def recent_configs(self) -> Iterator[MWDBConfig]: ...
    def recent_blobs(self) -> Iterator[MWDBBlob]: ...
    def listen_for_objects(self, last_object: Optional[Union[str, MWDBObject]] = ..., **kwargs: Any) -> Iterator[MWDBObject]: ...
    def listen_for_files(self, last_object: Optional[Union[str, MWDBFile]] = ..., **kwargs: Any) -> Iterator[MWDBFile]: ...
    def listen_for_configs(self, last_object: Optional[Union[str, MWDBConfig]] = ..., **kwargs: Any) -> Iterator[MWDBConfig]: ...
    def listen_for_blobs(self, last_object: Optional[Union[str, MWDBBlob]] = ..., **kwargs: Any) -> Iterator[MWDBBlob]: ...
    def query(self, hash: Any, raise_not_found: bool = ...) -> Optional[MWDBObject]: ...
    def query_file(self, hash: Any, raise_not_found: bool = ...) -> Optional[MWDBFile]: ...
    def query_config(self, hash: Any, raise_not_found: bool = ...) -> Optional[MWDBConfig]: ...
    def query_blob(self, hash: Any, raise_not_found: bool = ...) -> Optional[MWDBBlob]: ...
    def search(self, query: str) -> Iterator[MWDBObject]: ...
    def search_files(self, query: str) -> Iterator[MWDBFile]: ...
    def search_configs(self, query: str) -> Iterator[MWDBConfig]: ...
    def search_blobs(self, query: str) -> Iterator[MWDBBlob]: ...
    def count(self, query: Optional[str] = ...) -> int: ...
    def count_files(self, query: Optional[str] = ...) -> int: ...
    def count_configs(self, query: Optional[str] = ...) -> int: ...
    def count_blobs(self, query: Optional[str] = ...) -> int: ...
    def upload_file(self, name: str, content: bytes, **kwargs: Any) -> MWDBFile: ...
    def upload_config(self, family: str, cfg: Dict[str, Any], config_type: str = ..., **kwargs: Any) -> MWDBConfig: ...
    def upload_blob(self, name: str, type: str, content: str, **kwargs: Any) -> MWDBBlob: ...


Malwarecage = MWDB
