from typing import Any, Optional
from requests.exceptions import HTTPError


class MWDBError(RuntimeError):
    http_error: Any = ...
    def __init__(self, message: Optional[str] = ..., http_error: Optional[HTTPError] = ...) -> None: ...


class AuthError(MWDBError): ...
class ValidationError(MWDBError): ...
class ObjectError(MWDBError): ...
class PermissionError(MWDBError): ...
class LimitExceededError(MWDBError): ...
class BadResponseError(MWDBError): ...
class InternalError(MWDBError): ...
class GatewayError(MWDBError): ...
class NotAuthenticatedError(AuthError): ...
class InvalidCredentialsError(AuthError): ...
class UserPendingError(AuthError): ...
class UserDisabledError(AuthError): ...
class MaintenanceUnderwayError(AuthError): ...
class ObjectNotFoundError(ObjectError): ...
class TypeConflictError(ObjectError): ...


def get_http_error_message(http_error: HTTPError) -> None: ...
def map_http_error(http_error: HTTPError) -> MWDBError: ...


MalwarecageError = MWDBError
